/**
 * __author__ = anonymized
 * __date__   = 2019-05
 * __copyright__ = Creative Commons CC0
 */

#include <stdint.h>
#include <gtest/gtest.h>

#include "ciphers/small_aes_prince_sbox.h"
#include "utils/utils.h"


using ciphers::small_aes_ctx_t;
using ciphers::small_aes_key_t;
using ciphers::small_aes_state_t;
using utils::assert_equal;

// ---------------------------------------------------------

TEST(Small_AES_PRINCE_SBOX, test_key_schedule) {
    const small_aes_key_t key = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef
    };
    small_aes_ctx_t ctx;
    small_aes_key_setup(&ctx, key);

    uint8_t round_key[16];

    const uint8_t expected_round_keys[16 * SMALL_AES_NUM_ROUND_KEYS] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x00, 0x01, 0x0a, 0x00, 0x04, 0x04, 0x0c, 0x07,
        0x0c, 0x0d, 0x06, 0x0c, 0x00, 0x00, 0x08, 0x03,
        0x04, 0x08, 0x0e, 0x06, 0x00, 0x0c, 0x02, 0x01,
        0x0c, 0x01, 0x04, 0x0d, 0x0c, 0x01, 0x0c, 0x0e,
        0x0b, 0x0b, 0x0e, 0x05, 0x0b, 0x07, 0x0c, 0x04,
        0x07, 0x06, 0x08, 0x09, 0x0b, 0x07, 0x04, 0x07,
        0x09, 0x09, 0x04, 0x09, 0x02, 0x0e, 0x08, 0x0d,
        0x05, 0x08, 0x00, 0x04, 0x0e, 0x0f, 0x04, 0x03,
        0x02, 0x0b, 0x00, 0x09, 0x00, 0x05, 0x08, 0x04,
        0x05, 0x0d, 0x08, 0x00, 0x0b, 0x02, 0x0c, 0x03,
        0x01, 0x08, 0x04, 0x05, 0x01, 0x0d, 0x0c, 0x01,
        0x04, 0x00, 0x04, 0x01, 0x0f, 0x02, 0x08, 0x02,
        0x08, 0x01, 0x01, 0x0d, 0x09, 0x0c, 0x0d, 0x0c,
        0x0d, 0x0c, 0x09, 0x0d, 0x02, 0x0e, 0x01, 0x0f,
        0x03, 0x0a, 0x09, 0x08, 0x0a, 0x06, 0x04, 0x04,
        0x07, 0x0a, 0x0d, 0x09, 0x05, 0x04, 0x0c, 0x06,
        0x04, 0x09, 0x0e, 0x06, 0x0e, 0x0f, 0x0a, 0x02,
        0x09, 0x05, 0x07, 0x0b, 0x0c, 0x01, 0x0b, 0x0d,
        0x05, 0x05, 0x0f, 0x05, 0x0b, 0x0a, 0x05, 0x07,
        0x02, 0x0f, 0x02, 0x0c, 0x0e, 0x0e, 0x09, 0x01
    };

    for (size_t i = 0; i < SMALL_AES_NUM_ROUND_KEYS; ++i) {
        const uint8_t *start_expected_round_key = expected_round_keys + i * 16;
        storeu(round_key, ctx.key[i]);
        ASSERT_TRUE(assert_equal(start_expected_round_key, round_key, 16));
    }
}

// ---------------------------------------------------------

TEST(Small_AES_PRINCE_SBOX,
     test_encrypt_6_rounds_only_sbox_in_final_with_aes_ni) {
    const small_aes_key_t key = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef
    };
    const __m128i plaintext = vsetr8(
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    );
    const __m128i expected_ciphertext = vsetr8(
        0x0e, 0x0a, 0x0c, 0x00, 0x07, 0x00, 0x06, 0x04,
        0x0f, 0x0f, 0x07, 0x07, 0x06, 0x0a, 0x06, 0x0d
    );
    const size_t num_rounds = 6;

    small_aes_ctx_t ctx;
    small_aes_key_setup(&ctx, key);

    __m128i ciphertext =
        small_aes_prince_sbox_encrypt_rounds_only_sbox_in_final_with_aes_ni(
            &ctx,
            plaintext,
            num_rounds
        );
    ASSERT_TRUE(vare_equal(expected_ciphertext, ciphertext));
}

// ---------------------------------------------------------

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

// ---------------------------------------------------------
